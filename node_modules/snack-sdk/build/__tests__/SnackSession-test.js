'use strict';

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _stringify = require('babel-runtime/core-js/json/stringify');

var _stringify2 = _interopRequireDefault(_stringify);

var startDefaultSessionAsync = function () {
  var _ref = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee() {
    var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var session;
    return _regenerator2.default.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            session = new SnackSession((0, _extends3.default)({
              code: INITIAL_CODE,
              sessionId: SESSION_ID
            }, args));
            _context.next = 3;
            return session.startAsync();

          case 3:
            return _context.abrupt('return', session);

          case 4:
          case 'end':
            return _context.stop();
        }
      }
    }, _callee, this);
  }));

  return function startDefaultSessionAsync() {
    return _ref.apply(this, arguments);
  };
}();

var _sdkVersions = require('../configs/sdkVersions');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

jest.mock('pubnub');

var SnackSession = require('../SnackSession').default;

var INITIAL_CODE = 'code';
var NEW_CODE = 'new code!';
var NEW_CODE_2 = 'new code 2!';
var NEW_CODE_3 = 'new code 3!';
var SESSION_ID = '123456';
var SNACK_ID = 'abcdef';
var ORIGINAL_DATE_NOW = Date.now;
var ERROR_OBJECT = {
  message: 'Can\'t find variable: BLAH',
  line: 57,
  column: 13,
  stack: 'huge stack'
};
var ERROR_MESSAGE = {
  message: {
    type: 'ERROR',
    error: (0, _stringify2.default)(ERROR_OBJECT),
    device: {
      id: 'b070e2d7-6218-40d5-8cc7-2879c28012b2',
      name: 'SM-G930U'
    }
  }
};

function startMockingDate() {
  jest.useFakeTimers();
  Date.now = jest.genMockFunction().mockReturnValue(0);
}

function setMockDate(date) {
  Date.now = jest.genMockFunction().mockReturnValue(date);
  jest.runAllTimers();
}

function stopMockingDate() {
  jest.useRealTimers();
  Date.now = ORIGINAL_DATE_NOW;
}

describe('when a sessionId is specified', function () {
  it('connects to the correct channel', (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee2() {
    var session;
    return _regenerator2.default.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            session = new SnackSession({
              code: INITIAL_CODE,
              sessionId: SESSION_ID
            });
            _context2.next = 3;
            return session.startAsync();

          case 3:
            expect(session.pubnub.subscribe.mock.calls[0][0]).toEqual({
              channels: [SESSION_ID],
              withPresence: true
            });

          case 4:
          case 'end':
            return _context2.stop();
        }
      }
    }, _callee2, undefined);
  })));

  function createNewSessionWithShortId() {
    // eslint-disable-next-line no-new
    new SnackSession({
      code: INITIAL_CODE,
      sessionId: '123'
    });
  }
  it('errors if sessionId is too short', (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee3() {
    return _regenerator2.default.wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            expect(createNewSessionWithShortId).toThrow();

          case 1:
          case 'end':
            return _context3.stop();
        }
      }
    }, _callee3, undefined);
  })));

  it('generates a sessionId if none is provided', (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee4() {
    var session;
    return _regenerator2.default.wrap(function _callee4$(_context4) {
      while (1) {
        switch (_context4.prev = _context4.next) {
          case 0:
            session = new SnackSession({
              code: INITIAL_CODE
            });

            expect(session.channel).toBeDefined();

          case 2:
          case 'end':
            return _context4.stop();
        }
      }
    }, _callee4, undefined);
  })));
});

describe('getUrlAsync', function () {
  it('returns the correct url for an unsaved snack', (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee5() {
    var session, url;
    return _regenerator2.default.wrap(function _callee5$(_context5) {
      while (1) {
        switch (_context5.prev = _context5.next) {
          case 0:
            session = new SnackSession({
              code: INITIAL_CODE,
              sessionId: SESSION_ID
            });
            _context5.next = 3;
            return session.startAsync();

          case 3:
            _context5.next = 5;
            return session.getUrlAsync();

          case 5:
            url = _context5.sent;

            expect(url).toEqual('exp://expo.io/@snack/sdk.' + _sdkVersions.defaultSDKVersion + '-123456');

          case 7:
          case 'end':
            return _context5.stop();
        }
      }
    }, _callee5, undefined);
  })));

  it('returns the correct url for a saved snack', (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee6() {
    var session, url;
    return _regenerator2.default.wrap(function _callee6$(_context6) {
      while (1) {
        switch (_context6.prev = _context6.next) {
          case 0:
            session = new SnackSession({
              code: INITIAL_CODE,
              sessionId: SESSION_ID,
              snackId: SNACK_ID
            });
            _context6.next = 3;
            return session.startAsync();

          case 3:
            _context6.next = 5;
            return session.getUrlAsync();

          case 5:
            url = _context6.sent;

            expect(url).toEqual('exp://expo.io/@snack/abcdef+123456');

          case 7:
          case 'end':
            return _context6.stop();
        }
      }
    }, _callee6, undefined);
  })));

  it('uses the sdkVersion if specified', (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee7() {
    var session, url;
    return _regenerator2.default.wrap(function _callee7$(_context7) {
      while (1) {
        switch (_context7.prev = _context7.next) {
          case 0:
            session = new SnackSession({
              code: INITIAL_CODE,
              sessionId: SESSION_ID,
              sdkVersion: '14.0.0'
            });
            _context7.next = 3;
            return session.startAsync();

          case 3:
            _context7.next = 5;
            return session.getUrlAsync();

          case 5:
            url = _context7.sent;

            expect(url).toEqual('exp://expo.io/@snack/sdk.14.0.0-123456');

          case 7:
          case 'end':
            return _context7.stop();
        }
      }
    }, _callee7, undefined);
  })));

  it('works correctly from expo.io host', (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee8() {
    var session, url;
    return _regenerator2.default.wrap(function _callee8$(_context8) {
      while (1) {
        switch (_context8.prev = _context8.next) {
          case 0:
            session = new SnackSession({
              code: INITIAL_CODE,
              sessionId: SESSION_ID,
              host: 'expo.io'
            });
            _context8.next = 3;
            return session.startAsync();

          case 3:
            _context8.next = 5;
            return session.getUrlAsync();

          case 5:
            url = _context8.sent;

            expect(url).toEqual('exp://expo.io/@snack/sdk.' + _sdkVersions.defaultSDKVersion + '-123456');

          case 7:
          case 'end':
            return _context8.stop();
        }
      }
    }, _callee8, undefined);
  })));
});

describe('sendCodeAsync', function () {
  it('sends the correct message to the device', (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee9() {
    var session;
    return _regenerator2.default.wrap(function _callee9$(_context9) {
      while (1) {
        switch (_context9.prev = _context9.next) {
          case 0:
            startMockingDate();
            _context9.next = 3;
            return startDefaultSessionAsync();

          case 3:
            session = _context9.sent;
            _context9.next = 6;
            return session.sendCodeAsync(NEW_CODE);

          case 6:
            setMockDate(1000);
            stopMockingDate();
            expect(session.pubnub.publish.mock.calls[0][0]).toEqual({
              channel: SESSION_ID,
              message: {
                type: 'CODE',
                code: NEW_CODE
              }
            });

          case 9:
          case 'end':
            return _context9.stop();
        }
      }
    }, _callee9, undefined);
  })));

  it('debounces multiple updates', (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee10() {
    var session;
    return _regenerator2.default.wrap(function _callee10$(_context10) {
      while (1) {
        switch (_context10.prev = _context10.next) {
          case 0:
            startMockingDate();
            _context10.next = 3;
            return startDefaultSessionAsync();

          case 3:
            session = _context10.sent;
            _context10.next = 6;
            return session.sendCodeAsync(NEW_CODE);

          case 6:
            _context10.next = 8;
            return session.sendCodeAsync(NEW_CODE_2);

          case 8:
            _context10.next = 10;
            return session.sendCodeAsync(NEW_CODE_3);

          case 10:
            setMockDate(1000);
            stopMockingDate();
            expect(session.pubnub.publish.mock.calls[0][0]).toEqual({
              channel: SESSION_ID,
              message: {
                type: 'CODE',
                code: NEW_CODE_3
              }
            });

          case 13:
          case 'end':
            return _context10.stop();
        }
      }
    }, _callee10, undefined);
  })));

  it('logs successful publishes', (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee11() {
    var session, _originalConsoleLog;

    return _regenerator2.default.wrap(function _callee11$(_context11) {
      while (1) {
        switch (_context11.prev = _context11.next) {
          case 0:
            startMockingDate();
            _context11.next = 3;
            return startDefaultSessionAsync({
              verbose: true
            });

          case 3:
            session = _context11.sent;
            _context11.next = 6;
            return session.sendCodeAsync(NEW_CODE);

          case 6:
            setMockDate(1000);
            stopMockingDate();
            _originalConsoleLog = console.log;

            console.log = jest.genMockFunction().mockReturnValue(0);
            session.pubnub._publishListener({
              error: false,
              operation: 'PNPublishOperation',
              statusCode: 200
            }, {
              timetoken: '14916083102347989'
            });
            expect(console.log.mock.calls.length).toEqual(1);
            console.log = _originalConsoleLog;

          case 13:
          case 'end':
            return _context11.stop();
        }
      }
    }, _callee11, undefined);
  })));

  it('logs errors', (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee12() {
    var session, _originalConsoleError;

    return _regenerator2.default.wrap(function _callee12$(_context12) {
      while (1) {
        switch (_context12.prev = _context12.next) {
          case 0:
            startMockingDate();
            _context12.next = 3;
            return startDefaultSessionAsync({
              verbose: true
            });

          case 3:
            session = _context12.sent;
            _context12.next = 6;
            return session.sendCodeAsync(NEW_CODE);

          case 6:
            setMockDate(1000);
            stopMockingDate();
            _originalConsoleError = console.error;

            console.error = jest.genMockFunction().mockReturnValue(0);
            session.pubnub._publishListener({
              error: true,
              operation: 'PNPublishOperation',
              statusCode: 500
            }, {
              timetoken: '14916083102347989'
            });
            expect(console.error.mock.calls.length).toEqual(1);
            console.error = _originalConsoleError;

          case 13:
          case 'end':
            return _context12.stop();
        }
      }
    }, _callee12, undefined);
  })));
});

describe('error listener', function () {
  it('handles babel errors', (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee13() {
    var session, errorListener;
    return _regenerator2.default.wrap(function _callee13$(_context13) {
      while (1) {
        switch (_context13.prev = _context13.next) {
          case 0:
            _context13.next = 2;
            return startDefaultSessionAsync({
              verbose: true
            });

          case 2:
            session = _context13.sent;
            errorListener = jest.fn();

            session.addErrorListener(errorListener);
            _context13.next = 7;
            return session.startAsync();

          case 7:

            session.pubnub.__sendMessage(ERROR_MESSAGE);

            expect(errorListener.mock.calls[0][0]).toEqual([{
              device: {
                id: 'b070e2d7-6218-40d5-8cc7-2879c28012b2',
                name: 'SM-G930U'
              },
              message: 'Can\'t find variable: BLAH',
              startLine: 57,
              endLine: 57,
              startColumn: 13,
              endColumn: 13,
              stack: 'huge stack'
            }]);

          case 9:
          case 'end':
            return _context13.stop();
        }
      }
    }, _callee13, undefined);
  })));

  it('stops sending events after .remove() is called', (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee14() {
    var session, errorListener, subscription;
    return _regenerator2.default.wrap(function _callee14$(_context14) {
      while (1) {
        switch (_context14.prev = _context14.next) {
          case 0:
            _context14.next = 2;
            return startDefaultSessionAsync({
              verbose: true
            });

          case 2:
            session = _context14.sent;
            errorListener = jest.fn();
            subscription = session.addErrorListener(errorListener);
            _context14.next = 7;
            return session.startAsync();

          case 7:

            session.pubnub.__sendMessage(ERROR_MESSAGE);
            session.pubnub.__sendMessage(ERROR_MESSAGE);

            expect(errorListener.mock.calls.length).toEqual(2);

            subscription.remove();

            session.pubnub.__sendMessage(ERROR_MESSAGE);

            expect(errorListener.mock.calls.length).toEqual(2);

          case 13:
          case 'end':
            return _context14.stop();
        }
      }
    }, _callee14, undefined);
  })));
});

/*

{
  action: 'join',
  uuid: '{"id":"b070e2d7-6218-40d5-8cc7-2879c28012b2","name":"SM-G930U"}',
}

{
  action: 'timeout',
  uuid: '{"id":"b070e2d7-6218-40d5-8cc7-2879c28012b2","name":"SM-G930U"}',
}

{
  message: {
    'type': 'RESEND_CODE',
    'device': {
      'id': 'b070e2d7-6218-40d5-8cc7-2879c28012b2',
      'name': 'SM-G930U'
    }
  }
}



*/
//# sourceMappingURL=../__sourcemaps__/__tests__/SnackSession-test.js.map
