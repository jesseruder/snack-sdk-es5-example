'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _pubnub = require('pubnub');

var _pubnub2 = _interopRequireDefault(_pubnub);

var _shortid = require('shortid');

var _shortid2 = _interopRequireDefault(_shortid);

var _debounce = require('lodash/debounce');

var _debounce2 = _interopRequireDefault(_debounce);

var _pull = require('lodash/pull');

var _pull2 = _interopRequireDefault(_pull);

var _constructExperienceURL = require('./utils/constructExperienceURL');

var _constructExperienceURL2 = _interopRequireDefault(_constructExperienceURL);

var _sdkVersions = require('./configs/sdkVersions');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// eslint-disable-next-line no-duplicate-imports
var MIN_CHANNEL_LENGTH = 6;
var DEBOUNCE_INTERVAL = 500;

var SnackSession =

// Public API

function SnackSession(options) {
  var _this = this;

  (0, _classCallCheck3.default)(this, SnackSession);
  this.errorListeners = [];
  this.logListeners = [];
  this.presenceListeners = [];
  this.startAsync = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee() {
    return _regenerator2.default.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _this.isStarted = true;
            _this._subscribe();

          case 2:
          case 'end':
            return _context.stop();
        }
      }
    }, _callee, _this);
  }));
  this.stopAsync = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee2() {
    return _regenerator2.default.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            _this._unsubscribe();

          case 1:
          case 'end':
            return _context2.stop();
        }
      }
    }, _callee2, _this);
  }));
  this.getUrlAsync = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee3() {
    var url;
    return _regenerator2.default.wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            url = (0, _constructExperienceURL2.default)({
              sdkVersion: _this.sdkVersion,
              snackId: _this.snackId,
              channel: _this.channel,
              host: _this.host
            });
            return _context3.abrupt('return', url);

          case 2:
          case 'end':
            return _context3.stop();
        }
      }
    }, _callee3, _this);
  }));

  this.sendCodeAsync = function () {
    var _ref4 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee4(code) {
      return _regenerator2.default.wrap(function _callee4$(_context4) {
        while (1) {
          switch (_context4.prev = _context4.next) {
            case 0:
              if (_this.code !== code) {
                _this.code = code;
                _this._publish();
                // TODO: figure out how to route errors from _publishNotDebounced back here.
              }

            case 1:
            case 'end':
              return _context4.stop();
          }
        }
      }, _callee4, _this);
    }));

    return function (_x) {
      return _ref4.apply(this, arguments);
    };
  }();

  this.addErrorListener = function (listener) {
    _this.errorListeners.push(listener);
    return {
      remove: function remove() {
        (0, _pull2.default)(_this.errorListeners, listener);
      }
    };
  };

  this.addLogListener = function (listener) {
    _this.logListeners.push(listener);
    return {
      remove: function remove() {
        (0, _pull2.default)(_this.logListeners, listener);
      }
    };
  };

  this.addPresenceListener = function (listener) {
    _this.presenceListeners.push(listener);
    return {
      remove: function remove() {
        (0, _pull2.default)(_this.presenceListeners, listener);
      }
    };
  };

  this._sendErrorEvent = function (errors) {
    _this.errorListeners.forEach(function (listener) {
      return listener(errors);
    });
  };

  this._sendLogEvent = function (log) {
    _this.logListeners.forEach(function (listener) {
      return listener(log);
    });
  };

  this._sendPresenceEvent = function (device, status) {
    _this.presenceListeners.forEach(function (listener) {
      return listener({
        device: device,
        status: status
      });
    });
  };

  this._subscribe = function () {
    _this.pubnub.subscribe({
      channels: [_this.channel],
      withPresence: true
    });
  };

  this._unsubscribe = function () {
    _this.pubnub.unsubscribe({
      channels: [_this.channel]
    });
  };

  this._handleLogMessage = function (pubnubEvent) {
    var payload = pubnubEvent.payload || [];

    var message = {
      device: pubnubEvent.device,
      method: pubnubEvent.method,
      message: payload.join(' '),
      arguments: payload
    };
    _this._sendLogEvent(message);
  };

  this._handleErrorMessage = function (_ref5) {
    var error = _ref5.error,
        device = _ref5.device;

    if (error) {
      var rawErrorObject = JSON.parse(error);
      var errorObject = {
        message: rawErrorObject.message || '',
        device: device,
        stack: rawErrorObject.stack
      };

      if (rawErrorObject.line) {
        errorObject.startLine = errorObject.endLine = rawErrorObject.line;
      }

      if (rawErrorObject.column) {
        errorObject.startColumn = errorObject.endColumn = rawErrorObject.column;
      }

      if (rawErrorObject.loc) {
        errorObject.startLine = errorObject.endLine = rawErrorObject.loc.line;
        errorObject.startColumn = errorObject.endColumn = rawErrorObject.loc.column;
      }

      _this._sendErrorEvent([errorObject]);
    } else {
      _this._sendErrorEvent([]);
    }
  };

  this._handleResendCodeMessage = function () {
    _this._publishNotDebounced();
  };

  this._handleJoinMessage = function (device) {
    _this._publishNotDebounced();
    _this._sendPresenceEvent(device, 'join');
  };

  this._handleLeaveMessage = function (device) {
    _this._sendPresenceEvent(device, 'leave');
  };

  this._publishNotDebounced = function () {
    var message = { type: 'CODE', code: _this.code };
    _this.pubnub.publish({ channel: _this.channel, message: message }, function (status, response) {
      if (status.error) {
        _this._error(status.error);
      } else {
        _this._log('Published successfully!');
      }
    });
  };

  this._publish = (0, _debounce2.default)(this._publishNotDebounced, DEBOUNCE_INTERVAL);

  this._error = function (message) {
    if (_this.isVerbose) {
      console.error(message);
    }
  };

  this._log = function (message) {
    if (_this.isVerbose) {
      console.log(message);
    }
  };

  // TODO: check to make sure code was passed in

  this.code = options.code;
  this.sdkVersion = options.sdkVersion || _sdkVersions.defaultSDKVersion;
  this.isVerbose = !!options.verbose;
  this.channel = options.sessionId || _shortid2.default.generate();
  this.host = options.host || 'snack.expo.io';
  this.snackId = options.snackId;

  if (this.channel.length < MIN_CHANNEL_LENGTH) {
    throw new Error('Please use a channel id with more entropy');
  }

  this.pubnub = new _pubnub2.default({
    publishKey: 'pub-c-2a7fd67b-333d-40db-ad2d-3255f8835f70',
    subscribeKey: 'sub-c-0b655000-d784-11e6-b950-02ee2ddab7fe',
    ssl: true
  });

  this.pubnub.addListener({
    message: function message(_ref6) {
      var _message = _ref6.message;

      switch (_message.type) {
        case 'CONSOLE':
          _this._handleLogMessage(_message);
          break;
        case 'ERROR':
          _this._handleErrorMessage(_message);
          break;
        case 'RESEND_CODE':
          _this._handleResendCodeMessage(_message);
      }
    },
    presence: function presence(_ref7) {
      var action = _ref7.action,
          uuid = _ref7.uuid;

      var device = void 0;

      try {
        device = JSON.parse(uuid);
      } catch (e) {
        // Wasn't from the device
        return;
      }

      switch (action) {
        case 'join':
          _this._handleJoinMessage(device);
          break;
        case 'timeout':
        case 'leave':
          _this._handleLeaveMessage(device);
          break;
      }
    },
    status: function status(_ref8) {
      var category = _ref8.category;

      switch (category) {
        case 'PNConnectedCategory':
          break;
        case 'PNNetworkDownCategory':
        case 'PNNetworkIssuesCategory':
          _this._log('Lost network connection.');
          break;
        case 'PNReconnectedCategory':
          _this._log('Reconnected to PubNub server.');
          break;
        case 'PNNetworkUpCategory':
          _this._log('Detected network connection. Subscribing to channel.');
          _this._subscribe();
          break;
      }
    }
  });
}

// Private methods

;

exports.default = SnackSession;
//# sourceMappingURL=__sourcemaps__/SnackSession.js.map
