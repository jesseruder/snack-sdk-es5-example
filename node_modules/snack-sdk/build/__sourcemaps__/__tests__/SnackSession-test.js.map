{"version":3,"sources":["__tests__/SnackSession-test.js"],"names":["async","args","session","SnackSession","code","INITIAL_CODE","sessionId","SESSION_ID","startAsync","startDefaultSessionAsync","jest","mock","require","default","NEW_CODE","NEW_CODE_2","NEW_CODE_3","SNACK_ID","ORIGINAL_DATE_NOW","Date","now","ERROR_OBJECT","message","line","column","stack","ERROR_MESSAGE","type","error","JSON","device","id","name","startMockingDate","useFakeTimers","genMockFunction","mockReturnValue","setMockDate","date","runAllTimers","stopMockingDate","useRealTimers","describe","it","expect","pubnub","subscribe","calls","toEqual","channels","withPresence","createNewSessionWithShortId","toThrow","channel","toBeDefined","getUrlAsync","url","snackId","sdkVersion","host","sendCodeAsync","publish","verbose","_originalConsoleLog","console","log","_publishListener","operation","statusCode","timetoken","length","_originalConsoleError","errorListener","fn","addErrorListener","__sendMessage","startLine","endLine","startColumn","endColumn","subscription","remove"],"mappings":"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","file":"../../__tests__/SnackSession-test.js","sourcesContent":["'use strict';\n\nimport { defaultSDKVersion } from '../configs/sdkVersions';\n\njest.mock('pubnub');\n\nconst SnackSession = require('../SnackSession').default;\n\nconst INITIAL_CODE = 'code';\nconst NEW_CODE = 'new code!';\nconst NEW_CODE_2 = 'new code 2!';\nconst NEW_CODE_3 = 'new code 3!';\nconst SESSION_ID = '123456';\nconst SNACK_ID = 'abcdef';\nconst ORIGINAL_DATE_NOW = Date.now;\nconst ERROR_OBJECT = {\n  message: `Can't find variable: BLAH`,\n  line: 57,\n  column: 13,\n  stack: 'huge stack',\n};\nconst ERROR_MESSAGE = {\n  message: {\n    type: 'ERROR',\n    error: JSON.stringify(ERROR_OBJECT),\n    device: {\n      id: 'b070e2d7-6218-40d5-8cc7-2879c28012b2',\n      name: 'SM-G930U',\n    },\n  },\n};\n\nasync function startDefaultSessionAsync(args = {}) {\n  let session = new SnackSession({\n    code: INITIAL_CODE,\n    sessionId: SESSION_ID,\n    ...args,\n  });\n  await session.startAsync();\n  return session;\n}\n\nfunction startMockingDate() {\n  jest.useFakeTimers();\n  Date.now = jest.genMockFunction().mockReturnValue(0);\n}\n\nfunction setMockDate(date) {\n  Date.now = jest.genMockFunction().mockReturnValue(date);\n  jest.runAllTimers();\n}\n\nfunction stopMockingDate() {\n  jest.useRealTimers();\n  Date.now = ORIGINAL_DATE_NOW;\n}\n\ndescribe('when a sessionId is specified', () => {\n  it('connects to the correct channel', async () => {\n    let session = new SnackSession({\n      code: INITIAL_CODE,\n      sessionId: SESSION_ID,\n    });\n    await session.startAsync();\n    expect(session.pubnub.subscribe.mock.calls[0][0]).toEqual({\n      channels: [SESSION_ID],\n      withPresence: true,\n    });\n  });\n\n  function createNewSessionWithShortId() {\n    // eslint-disable-next-line no-new\n    new SnackSession({\n      code: INITIAL_CODE,\n      sessionId: '123',\n    });\n  }\n  it('errors if sessionId is too short', async () => {\n    expect(createNewSessionWithShortId).toThrow();\n  });\n\n  it('generates a sessionId if none is provided', async () => {\n    let session = new SnackSession({\n      code: INITIAL_CODE,\n    });\n    expect(session.channel).toBeDefined();\n  });\n});\n\ndescribe('getUrlAsync', () => {\n  it('returns the correct url for an unsaved snack', async () => {\n    let session = new SnackSession({\n      code: INITIAL_CODE,\n      sessionId: SESSION_ID,\n    });\n    await session.startAsync();\n    let url = await session.getUrlAsync();\n    expect(url).toEqual(`exp://expo.io/@snack/sdk.${defaultSDKVersion}-123456`);\n  });\n\n  it('returns the correct url for a saved snack', async () => {\n    let session = new SnackSession({\n      code: INITIAL_CODE,\n      sessionId: SESSION_ID,\n      snackId: SNACK_ID,\n    });\n    await session.startAsync();\n    let url = await session.getUrlAsync();\n    expect(url).toEqual(`exp://expo.io/@snack/abcdef+123456`);\n  });\n\n  it('uses the sdkVersion if specified', async () => {\n    let session = new SnackSession({\n      code: INITIAL_CODE,\n      sessionId: SESSION_ID,\n      sdkVersion: '14.0.0',\n    });\n    await session.startAsync();\n    let url = await session.getUrlAsync();\n    expect(url).toEqual('exp://expo.io/@snack/sdk.14.0.0-123456');\n  });\n\n  it('works correctly from expo.io host', async () => {\n    let session = new SnackSession({\n      code: INITIAL_CODE,\n      sessionId: SESSION_ID,\n      host: 'expo.io',\n    });\n    await session.startAsync();\n    let url = await session.getUrlAsync();\n    expect(url).toEqual(`exp://expo.io/@snack/sdk.${defaultSDKVersion}-123456`);\n  });\n});\n\ndescribe('sendCodeAsync', () => {\n  it('sends the correct message to the device', async () => {\n    startMockingDate();\n    let session = await startDefaultSessionAsync();\n    await session.sendCodeAsync(NEW_CODE);\n    setMockDate(1000);\n    stopMockingDate();\n    expect(session.pubnub.publish.mock.calls[0][0]).toEqual({\n      channel: SESSION_ID,\n      message: {\n        type: 'CODE',\n        code: NEW_CODE,\n      },\n    });\n  });\n\n  it('debounces multiple updates', async () => {\n    startMockingDate();\n    let session = await startDefaultSessionAsync();\n    await session.sendCodeAsync(NEW_CODE);\n    await session.sendCodeAsync(NEW_CODE_2);\n    await session.sendCodeAsync(NEW_CODE_3);\n    setMockDate(1000);\n    stopMockingDate();\n    expect(session.pubnub.publish.mock.calls[0][0]).toEqual({\n      channel: SESSION_ID,\n      message: {\n        type: 'CODE',\n        code: NEW_CODE_3,\n      },\n    });\n  });\n\n  it('logs successful publishes', async () => {\n    startMockingDate();\n    let session = await startDefaultSessionAsync({\n      verbose: true,\n    });\n    await session.sendCodeAsync(NEW_CODE);\n    setMockDate(1000);\n    stopMockingDate();\n    let _originalConsoleLog = console.log;\n    console.log = jest.genMockFunction().mockReturnValue(0);\n    session.pubnub._publishListener(\n      {\n        error: false,\n        operation: 'PNPublishOperation',\n        statusCode: 200,\n      },\n      {\n        timetoken: '14916083102347989',\n      }\n    );\n    expect(console.log.mock.calls.length).toEqual(1);\n    console.log = _originalConsoleLog;\n  });\n\n  it('logs errors', async () => {\n    startMockingDate();\n    let session = await startDefaultSessionAsync({\n      verbose: true,\n    });\n    await session.sendCodeAsync(NEW_CODE);\n    setMockDate(1000);\n    stopMockingDate();\n    let _originalConsoleError = console.error;\n    console.error = jest.genMockFunction().mockReturnValue(0);\n    session.pubnub._publishListener(\n      {\n        error: true,\n        operation: 'PNPublishOperation',\n        statusCode: 500,\n      },\n      {\n        timetoken: '14916083102347989',\n      }\n    );\n    expect(console.error.mock.calls.length).toEqual(1);\n    console.error = _originalConsoleError;\n  });\n});\n\ndescribe('error listener', () => {\n  it('handles babel errors', async () => {\n    let session = await startDefaultSessionAsync({\n      verbose: true,\n    });\n    let errorListener = jest.fn();\n    session.addErrorListener(errorListener);\n    await session.startAsync();\n\n    session.pubnub.__sendMessage(ERROR_MESSAGE);\n\n    expect(errorListener.mock.calls[0][0]).toEqual([\n      {\n        device: {\n          id: 'b070e2d7-6218-40d5-8cc7-2879c28012b2',\n          name: 'SM-G930U',\n        },\n        message: `Can't find variable: BLAH`,\n        startLine: 57,\n        endLine: 57,\n        startColumn: 13,\n        endColumn: 13,\n        stack: 'huge stack',\n      },\n    ]);\n  });\n\n  it('stops sending events after .remove() is called', async () => {\n    let session = await startDefaultSessionAsync({\n      verbose: true,\n    });\n    let errorListener = jest.fn();\n    let subscription = session.addErrorListener(errorListener);\n    await session.startAsync();\n\n    session.pubnub.__sendMessage(ERROR_MESSAGE);\n    session.pubnub.__sendMessage(ERROR_MESSAGE);\n\n    expect(errorListener.mock.calls.length).toEqual(2);\n\n    subscription.remove();\n\n    session.pubnub.__sendMessage(ERROR_MESSAGE);\n\n    expect(errorListener.mock.calls.length).toEqual(2);\n  });\n});\n\n/*\n\n{\n  action: 'join',\n  uuid: '{\"id\":\"b070e2d7-6218-40d5-8cc7-2879c28012b2\",\"name\":\"SM-G930U\"}',\n}\n\n{\n  action: 'timeout',\n  uuid: '{\"id\":\"b070e2d7-6218-40d5-8cc7-2879c28012b2\",\"name\":\"SM-G930U\"}',\n}\n\n{\n  message: {\n    'type': 'RESEND_CODE',\n    'device': {\n      'id': 'b070e2d7-6218-40d5-8cc7-2879c28012b2',\n      'name': 'SM-G930U'\n    }\n  }\n}\n\n\n\n*/\n"],"sourceRoot":"/sketch-sdk/src"}