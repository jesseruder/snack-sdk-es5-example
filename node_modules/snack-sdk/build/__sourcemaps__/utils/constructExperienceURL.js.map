{"version":3,"sources":["utils/constructExperienceURL.js"],"names":["constructExperienceURL","sdkVersion","snackId","channel","host","let","hostWithoutSubdomain","includes","replace","result"],"mappings":";;;;;kBAWwBA,sB;AAAT,SAASA,sBAAT,OAKL;AAAA,MAJRC,UAIQ,QAJRA,UAIQ;AAAA,MAHRC,OAGQ,QAHRA,OAGQ;AAAA,MAFRC,OAEQ,QAFRA,OAEQ;AAAA,MADRC,IACQ,QADRA,IACQ;;AACRC,MAAIC,6BAAJD;AACA,MAAID,KAAKG,QAALH,CAAc,eAAdA,CAAJ,EAAoC;AAClCE,2BAAuBF,KAAKI,OAALJ,CAAa,eAAbA,EAA8B,SAA9BA,CAAvBE;AACF,GAFA,MAEO;AACLA,2BAAuBF,IAAvBE;AACF;;AAEA;AACA;AACA;AACA;AACAD,MAAII,SAASP,qBACAI,oBADAJ,gBAC+BA,OAD/BA,SAC0CC,OAD1CD,cAEAI,oBAFAJ,oBAEmCD,UAFnCC,SAEiDC,OAF9DE;AAGA,SAAOI,MAAP;AACF","file":"../../utils/constructExperienceURL.js","sourcesContent":["/* @flow */\n\nimport type { SDKVersion } from '../configs/sdkVersions';\n\ntype Props = {\n  sdkVersion: SDKVersion,\n  channel: string,\n  snackId: ?string,\n  host: string,\n};\n\nexport default function constructExperienceURL({\n  sdkVersion,\n  snackId,\n  channel,\n  host,\n}: Props) {\n  let hostWithoutSubdomain;\n  if (host.includes('snack.expo.io')) {\n    hostWithoutSubdomain = host.replace('snack.expo.io', 'expo.io');\n  } else {\n    hostWithoutSubdomain = host;\n  }\n\n  // If we are at a saved snack and have an id, go to that experience id.\n  // Otherwise tell the server to give us the blank snack experience at SDK_VERSION,\n  // and append a uuid to the url so that two different users starting a new snack\n  // have different ids.\n  let result = snackId\n    ? `exp://${hostWithoutSubdomain}/@snack/${snackId}+${channel}`\n    : `exp://${hostWithoutSubdomain}/@snack/sdk.${sdkVersion}-${channel}`;\n  return result;\n}\n"],"sourceRoot":"/sketch-sdk/src"}