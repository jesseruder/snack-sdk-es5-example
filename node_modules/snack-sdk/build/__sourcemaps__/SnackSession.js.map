{"version":3,"sources":["SnackSession.js"],"names":["MIN_CHANNEL_LENGTH","DEBOUNCE_INTERVAL","SnackSession","constructor","options","errorListeners","logListeners","presenceListeners","startAsync","async","isStarted","_subscribe","stopAsync","_unsubscribe","getUrlAsync","url","constructExperienceURL","sdkVersion","snackId","channel","host","sendCodeAsync","code","_publish","addErrorListener","listener","push","remove","pull","addLogListener","addPresenceListener","_sendErrorEvent","errors","forEach","_sendLogEvent","log","_sendPresenceEvent","device","status","pubnub","subscribe","channels","withPresence","unsubscribe","_handleLogMessage","pubnubEvent","let","payload","message","method","join","arguments","_handleErrorMessage","error","rawErrorObject","JSON","parse","errorObject","stack","line","startLine","endLine","column","startColumn","endColumn","loc","_handleResendCodeMessage","_publishNotDebounced","_handleJoinMessage","_handleLeaveMessage","type","publish","response","_error","_log","debounce","isVerbose","console","verbose","sessionId","shortid","generate","length","Error","publishKey","subscribeKey","ssl","addListener","presence","action","uuid","e","category"],"mappings":"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","file":"../SnackSession.js","sourcesContent":["/**\n * @flow\n */\n\nimport PubNub from 'pubnub';\nimport shortid from 'shortid';\nimport debounce from 'lodash/debounce';\nimport pull from 'lodash/pull';\n\nimport constructExperienceURL from './utils/constructExperienceURL';\nimport { defaultSDKVersion } from './configs/sdkVersions';\n\n// eslint-disable-next-line no-duplicate-imports\nimport type { SDKVersion } from './configs/sdkVersions';\nimport type {\n  ExpoSnackSessionArguments,\n  ExpoSubscription,\n  ExpoErrorListener,\n  ExpoLogListener,\n  ExpoPresenceStatus,\n  ExpoPresenceListener,\n  ExpoPubnubError,\n  ExpoError,\n  ExpoPubnubDeviceLog,\n  ExpoDeviceLog,\n  ExpoDevice,\n} from './types';\n\nconst MIN_CHANNEL_LENGTH = 6;\nconst DEBOUNCE_INTERVAL = 500;\n\nexport default class SnackSession {\n  code: string;\n  snackId: ?string;\n  sdkVersion: SDKVersion;\n  isVerbose: boolean;\n  isStarted: boolean;\n  pubnub: any;\n  channel: string;\n  errorListeners: Array<ExpoErrorListener> = [];\n  logListeners: Array<ExpoLogListener> = [];\n  presenceListeners: Array<ExpoPresenceListener> = [];\n  host: string;\n\n  // Public API\n\n  constructor(options: ExpoSnackSessionArguments) {\n    // TODO: check to make sure code was passed in\n\n    this.code = options.code;\n    this.sdkVersion = options.sdkVersion || defaultSDKVersion;\n    this.isVerbose = !!options.verbose;\n    this.channel = options.sessionId || shortid.generate();\n    this.host = options.host || 'snack.expo.io';\n    this.snackId = options.snackId;\n\n    if (this.channel.length < MIN_CHANNEL_LENGTH) {\n      throw new Error('Please use a channel id with more entropy');\n    }\n\n    this.pubnub = new PubNub({\n      publishKey: 'pub-c-2a7fd67b-333d-40db-ad2d-3255f8835f70',\n      subscribeKey: 'sub-c-0b655000-d784-11e6-b950-02ee2ddab7fe',\n      ssl: true,\n    });\n\n    this.pubnub.addListener({\n      message: ({ message }) => {\n        switch (message.type) {\n          case 'CONSOLE':\n            this._handleLogMessage(message);\n            break;\n          case 'ERROR':\n            this._handleErrorMessage(message);\n            break;\n          case 'RESEND_CODE':\n            this._handleResendCodeMessage(message);\n        }\n      },\n      presence: ({ action, uuid }) => {\n        let device;\n\n        try {\n          device = JSON.parse(uuid);\n        } catch (e) {\n          // Wasn't from the device\n          return;\n        }\n\n        switch (action) {\n          case 'join':\n            this._handleJoinMessage(device);\n            break;\n          case 'timeout':\n          case 'leave':\n            this._handleLeaveMessage(device);\n            break;\n        }\n      },\n      status: ({ category }) => {\n        switch (category) {\n          case 'PNConnectedCategory':\n            break;\n          case 'PNNetworkDownCategory':\n          case 'PNNetworkIssuesCategory':\n            this._log('Lost network connection.');\n            break;\n          case 'PNReconnectedCategory':\n            this._log('Reconnected to PubNub server.');\n            break;\n          case 'PNNetworkUpCategory':\n            this._log('Detected network connection. Subscribing to channel.');\n            this._subscribe();\n            break;\n        }\n      },\n    });\n  }\n\n  startAsync = async (): Promise<void> => {\n    this.isStarted = true;\n    this._subscribe();\n  };\n\n  stopAsync = async (): Promise<void> => {\n    this._unsubscribe();\n  };\n\n  getUrlAsync = async (): Promise<string> => {\n    const url = constructExperienceURL({\n      sdkVersion: this.sdkVersion,\n      snackId: this.snackId,\n      channel: this.channel,\n      host: this.host,\n    });\n\n    return url;\n  };\n\n  sendCodeAsync = async (code: string): Promise<void> => {\n    if (this.code !== code) {\n      this.code = code;\n      this._publish();\n      // TODO: figure out how to route errors from _publishNotDebounced back here.\n    }\n  };\n\n  addErrorListener = (listener: ExpoErrorListener): ExpoSubscription => {\n    this.errorListeners.push(listener);\n    return {\n      remove: () => {\n        pull(this.errorListeners, listener);\n      },\n    };\n  };\n\n  addLogListener = (listener: ExpoLogListener): ExpoSubscription => {\n    this.logListeners.push(listener);\n    return {\n      remove: () => {\n        pull(this.logListeners, listener);\n      },\n    };\n  };\n\n  addPresenceListener = (listener: ExpoPresenceListener): ExpoSubscription => {\n    this.presenceListeners.push(listener);\n    return {\n      remove: () => {\n        pull(this.presenceListeners, listener);\n      },\n    };\n  };\n\n  // Private methods\n\n  _sendErrorEvent = (errors: Array<ExpoError>): void => {\n    this.errorListeners.forEach(listener => listener(errors));\n  };\n\n  _sendLogEvent = (log: ExpoDeviceLog): void => {\n    this.logListeners.forEach(listener => listener(log));\n  };\n\n  _sendPresenceEvent = (\n    device: ExpoDevice,\n    status: ExpoPresenceStatus\n  ): void => {\n    this.presenceListeners.forEach(listener =>\n      listener({\n        device,\n        status,\n      })\n    );\n  };\n\n  _subscribe = () => {\n    this.pubnub.subscribe({\n      channels: [this.channel],\n      withPresence: true,\n    });\n  };\n\n  _unsubscribe = () => {\n    this.pubnub.unsubscribe({\n      channels: [this.channel],\n    });\n  };\n\n  _handleLogMessage = (pubnubEvent: ExpoPubnubDeviceLog) => {\n    let payload = pubnubEvent.payload || [];\n\n    let message = {\n      device: pubnubEvent.device,\n      method: pubnubEvent.method,\n      message: payload.join(' '),\n      arguments: payload,\n    };\n    this._sendLogEvent(message);\n  };\n\n  _handleErrorMessage = ({\n    error,\n    device,\n  }: { error: string, device?: ExpoDevice }) => {\n    if (error) {\n      let rawErrorObject: ExpoPubnubError = JSON.parse(error);\n      let errorObject: ExpoError = {\n        message: rawErrorObject.message || '',\n        device,\n        stack: rawErrorObject.stack,\n      };\n\n      if (rawErrorObject.line) {\n        errorObject.startLine = errorObject.endLine = rawErrorObject.line;\n      }\n\n      if (rawErrorObject.column) {\n        errorObject.startColumn = errorObject.endColumn = rawErrorObject.column;\n      }\n\n      if (rawErrorObject.loc) {\n        errorObject.startLine = errorObject.endLine = rawErrorObject.loc.line;\n        errorObject.startColumn = errorObject.endColumn =\n          rawErrorObject.loc.column;\n      }\n\n      this._sendErrorEvent([errorObject]);\n    } else {\n      this._sendErrorEvent([]);\n    }\n  };\n\n  _handleResendCodeMessage = () => {\n    this._publishNotDebounced();\n  };\n\n  _handleJoinMessage = (device: ExpoDevice) => {\n    this._publishNotDebounced();\n    this._sendPresenceEvent(device, 'join');\n  };\n\n  _handleLeaveMessage = (device: ExpoDevice) => {\n    this._sendPresenceEvent(device, 'leave');\n  };\n\n  _publishNotDebounced = () => {\n    const message = { type: 'CODE', code: this.code };\n    this.pubnub.publish(\n      { channel: this.channel, message },\n      (status, response) => {\n        if (status.error) {\n          this._error(status.error);\n        } else {\n          this._log('Published successfully!');\n        }\n      }\n    );\n  };\n\n  _publish = debounce(this._publishNotDebounced, DEBOUNCE_INTERVAL);\n\n  _error = (message: string) => {\n    if (this.isVerbose) {\n      console.error(message);\n    }\n  };\n\n  _log = (message: string) => {\n    if (this.isVerbose) {\n      console.log(message);\n    }\n  };\n}\n"],"sourceRoot":"/sketch-sdk/src"}